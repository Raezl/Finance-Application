//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Finance_Application
{
    using System;
    using System.Collections.Generic;
    using System.Xml;
    using System.Linq;
    using System.Diagnostics;


    public partial class Transaction
    {

        public int TransactionId { get; set; }
        public string Category { get; set; }
        public string Description { get; set; }
        public bool Recuring { get; set; }
        public string Date { get; set; }
        public string TransactionType { get; set; }
        public int UserDetailsUserId { get; set; }
        public int PayerPayeePPId { get; set; }
        public double Amount { get; set; }
    
        public virtual UserDetails UserDetail { get; set; }
        public virtual PayerPayee PayerPayee { get; set; }


        //Add a transaction to the database
        public bool AddTransaction(List<Transaction> obj)
        {

            using (var context = new FinanceEDMContainer())
            {
                foreach(Transaction item in obj)
                {
                    context.Transactions.Add(item);
                    context.SaveChanges();
                } 
            }
            return true;
        }
        //REad from the transaction xmlfile based on the date
        public List<String> ReadTransactionXML(String date)
        {
            XmlDocument xml = new XmlDocument();
            List<String> records = new List<String>();
            try
            {
                xml.Load("C:\\Users\\yasirulakruwan\\source\\repos\\Finance Application\\Finance Application\\bin\\Debug\\" + date + ".xml");
                XmlNodeList root = xml.GetElementsByTagName("Transaction");

                for (int i = 0; i < root.Count; i++)
                {
                    for (int e = 0; e <= 6; e++)
                        records.Add(root[i].Attributes[e].Value);
                }
            }
            catch (System.IO.FileNotFoundException e)
            {
                Debug.WriteLine("XML File reader error: " + e);
            }
            return records;
        }

        //Write all the transactions to the xml file
        public void WriteTransactionXML(String date)
        {
            using (var context = new FinanceEDMContainer())
            {
                Transaction[] records = GetTransaction(date);

                String[] columnname = { "Category", "Description", "Recuring", "Amount", "TransactionType", "PayerPayeePPId", "TransactionId" };


                XmlWriterSettings settings = new XmlWriterSettings();
                settings.Indent = true;
                XmlWriter writer = XmlWriter.Create(date + ".xml", settings);
                writer.WriteStartDocument();
                writer.WriteStartElement("Transactions");
                writer.WriteAttributeString("Date", date);

                for (int i = 0; i < records.Length; i++)
                {
                    writer.WriteStartElement("Transaction");


                    for (int e = 0; e < columnname.Length; e++)
                    {
                        writer.WriteAttributeString(columnname[e], records[i].GetType().GetProperty(columnname[e]).GetValue(records[i]).ToString());
                    }

                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
                writer.WriteEndDocument();
                writer.Close();
            }



        }
        //remove a transaction by id
        public bool RemoveTransaction(int id)
        {
            using (var context = new FinanceEDMContainer())
            {
                var remove = context.Transactions.Where(e => e.TransactionId == id).Single();
                context.Transactions.Remove(remove);
                context.SaveChanges();
            }
            return true;
        }

        //update the transaction fields
        public bool UpdateTransaction(Transaction obj)
        {
            using (var context = new FinanceEDMContainer())
            {
                var record = context.Transactions.SingleOrDefault(e => e.TransactionId == obj.TransactionId);
                record.Category = obj.Category;
                record.Date = obj.Date;
                record.Description = obj.Description;
                record.PayerPayeePPId = obj.PayerPayeePPId;
                record.Recuring = obj.Recuring;
                record.TransactionId = obj.TransactionId;
                record.TransactionType = obj.TransactionType;
                context.SaveChanges();
            }
            return true;
        }

        //Get transaction by Date
        public Transaction[] GetTransaction(String Date)
        {
            using (var context = new FinanceEDMContainer())
            {
                return context.Transactions.Where(e => e.Date == Date).ToArray();
            }

        }

        public Transaction GetTransaction(int Id)
        {
            using (var context = new FinanceEDMContainer())
            {
                Debug.WriteLine(Id);
                return context.Transactions.Where(e => e.TransactionId == Id).Single();
            }
        }

        public void predict()
        {
            List<double> day = new List<double>();
            List<double> totalTransaction = new List<double>();
            using (var context = new FinanceEDMContainer())
            {
                day.Add(0);
                List<Transaction> lst = context.Transactions.ToList().OrderByDescending(e => DateTime.Parse(e.Date)).ToList();
                for (int i = 0; i < lst.Count - 1; i++)
                {
                    double daydiff = (DateTime.Parse(lst[i].Date) - DateTime.Parse(lst[i + 1].Date)).TotalDays;
                    if (daydiff != 0)
                    {
                        totalTransaction.Add(lst[i].Amount);
                    }
                    else
                    {
                        if (totalTransaction.Count != 0)
                            totalTransaction[i] = (lst[i].Amount + lst[i + 1].Amount);
                        else
                            totalTransaction.Add(lst[i].Amount + lst[i + 1].Amount);
                    }
                }
                Debug.WriteLine(day.Count);
                Debug.WriteLine(totalTransaction.Count);
            }
        }
    }
}
